{"ast":null,"code":"var _jsxFileName = \"/home/bk/Documents/GitHub/Emojipedia/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\n\n//Arrow functions are sometimes referred to as the fat arrow.\n//It's a shorter way of writing a JS function.\n\n//So wheneer we want to add a function to another function\n//we tend to use an anonymous function to make things simpler and\n//easier to read.\n//So for example:\n\nvar numbers = [3, 56, 2, 48, 5];\nvar newNumbers = numbers.map(function (x) {\n  return x * x;\n});\n//The arrow function let's us deleted the word 'function' abo\\/e.\n//This 'function' keyword is replaced with '=>'.\n//So function becomes  =>\n//So the (x) , these are the inputs of our function\n//and the bit between the {} is the body of our function.\n//And the only thing that denotes that this whole thing is a function\n//is that so called fat arrow.\n//It will look like ( (x) = >) {body}\n//There cannot be a space between the = and >\n//We could do more; if we hae two input parameters, so instead of\n//(x) we hae (x, y) and it reads 'return x * y', we definitely need a\n//set of paranthese around them.\n//But if you only hae one input, or one paramter, you can get rid of\n//the parantheses. So (x) becomes x.\n//Also, if you only a single line statement where you're only\n//returning a single expression such as 'x * x', you can actually delete\n//the return keyword and the curly braces.\n//So (function (x) { return x * x; })\n//Becomes  (x => x * x);\n//So you end up with inline code that looks like that ^.\n//Now our map function is taking each item in our numbers array and\n//multiplying it by itself and then creating a new array.\n//There are cons; this cleaned ersion could be really hard to understand\n//for a beginner of JS.\n//Especially when you hae people in your team who are more junior,\n//haing code like this isn't great.\n//So it depends on the situation for you you to prefer to write in\n//'shortened syntax'.\n//But be aware because in React map, filter, reduce is used a lot,\n//people do hae a tendecy to use the arrow function etc.\n//You can literally acheie things in one line.\n\n//You can ha\\/e a go at simplifying he functions below.\n\n////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })","map":{"version":3,"names":["React","ReactDOM","App","render","document","getElementById","numbers","newNumbers","map","x"],"sources":["/home/bk/Documents/GitHub/Emojipedia/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//Arrow functions are sometimes referred to as the fat arrow.\n//It's a shorter way of writing a JS function.\n\n//So wheneer we want to add a function to another function\n//we tend to use an anonymous function to make things simpler and\n//easier to read.\n//So for example:\n\nvar numbers = [3, 56, 2, 48, 5];\n\nconst newNumbers = numbers.map(function (x) {\n  return x * x;\n});\n//The arrow function let's us deleted the word 'function' abo\\/e.\n//This 'function' keyword is replaced with '=>'.\n//So function becomes  =>\n//So the (x) , these are the inputs of our function\n//and the bit between the {} is the body of our function.\n//And the only thing that denotes that this whole thing is a function\n//is that so called fat arrow.\n//It will look like ( (x) = >) {body}\n//There cannot be a space between the = and >\n//We could do more; if we hae two input parameters, so instead of\n//(x) we hae (x, y) and it reads 'return x * y', we definitely need a\n//set of paranthese around them.\n//But if you only hae one input, or one paramter, you can get rid of\n//the parantheses. So (x) becomes x.\n//Also, if you only a single line statement where you're only\n//returning a single expression such as 'x * x', you can actually delete\n//the return keyword and the curly braces.\n//So (function (x) { return x * x; })\n//Becomes  (x => x * x);\n//So you end up with inline code that looks like that ^.\n//Now our map function is taking each item in our numbers array and\n//multiplying it by itself and then creating a new array.\n//There are cons; this cleaned ersion could be really hard to understand\n//for a beginner of JS.\n//Especially when you hae people in your team who are more junior,\n//haing code like this isn't great.\n//So it depends on the situation for you you to prefer to write in\n//'shortened syntax'.\n//But be aware because in React map, filter, reduce is used a lot,\n//people do hae a tendecy to use the arrow function etc.\n//You can literally acheie things in one line.\n\n//You can ha\\/e a go at simplifying he functions below.\n\n////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,GAAG,MAAM,kBAAkB;AAElCD,QAAQ,CAACE,MAAM,eAAC,oBAAC,GAAG;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,EAAG,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;;AAEzD;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAE/B,IAAMC,UAAU,GAAGD,OAAO,CAACE,GAAG,CAAC,UAAUC,CAAC,EAAE;EAC1C,OAAOA,CAAC,GAAGA,CAAC;AACd,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}